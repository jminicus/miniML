(*
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;

(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;

(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)

    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string

    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string

    val extract_exp : value -> expr
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = [] ;;

    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    let lookup (env : env) (varname : varid) : value =
      try
        !(List.assoc varname env)
      with
      | Not_found -> raise (EvalError ("Variable " ^ varname ^ " is unbound"))

    let rec extend (env : env) (varname : varid) (loc : value ref) : env =
      match env with
      | [] -> [varname, loc]
      | (v, vref) :: tl -> if v = varname then (v, loc) :: tl
                           else (v, vref) :: extend tl varname loc

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) ->
          if printenvp then
            (env_to_string env) ^ " || " ^ (exp_to_concrete_string exp)
          else exp_to_concrete_string exp

    and env_to_string (env : env) : string =
      match env with
      | [] -> ""
      | (v, vref) :: tl -> v ^ " = " ^ (value_to_string ~printenvp:false !vref)
                           ^ "\n" ^ (env_to_string tl)

    (* helper function for extracting the expression out of a value *)
    let extract_exp (value : value) : expr =
      match value with
      | Val expr -> expr
      | Closure (expr, _) -> expr ;;
  end ;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an enviornment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures).

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)

let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* defining types of models for use in abstraction *)
type model = | Sub | Dyn ;;

(* takes in the expression, the environemnt, and a model to recusrively
   evaluate the function based on the subsitution rules defined by the
   inputted model *)
let rec eval (exp : expr) (env : Env.env) (model : model) : Env.value =

  (* recursive evaluations for the separate models *)
  let eval_s' (exp : expr) =
    eval exp (Env.empty ()) Sub in

  let eval_d' (exp : expr) (env : Env.env) =
    eval exp env Dyn in

  (* abstraction helper for deciding if model is substitution or not *)
  let sub = model = Sub in

  match exp with
  | Var x -> if sub then raise (EvalError ("Variable " ^ x ^ " is unbound"))
             else eval_d' (Env.extract_exp (Env.lookup env x)) env
  | Num _ | Bool _ | Fun _  | String _ | Float _ -> Env.Val exp
  | Unop (unop, e) ->

      (* confirms that the type being applied to unop is a number or
         a string and performs their corresponding unops *)
     (let unop_eval (e : Env.value) =
        match e with
        | Env.Val (Num n) ->
            if unop = Negate then (Env.Val (Num (~- n)))
            else raise (EvalError "Cannot do this op on an int")
        | Env.Val (String s) ->
            if unop = Length then (Env.Val (Num (String.length s)))
            else raise (EvalError "Cannot do this op on a string")
        | _ -> raise (EvalError "Cannot perform unop on this type") in

       if sub then unop_eval (eval_s' e) else unop_eval (eval_d' e env))
  | Binop (bin, e1, e2) ->

      (* confirms that both the types being applied to the binop are numbers
         and applies the matching operation to the values, or concats if
         both are strings *)
    (let binop_eval (e1 : Env.value) (e2 : Env.value) =
         match e1, e2 with
         | Env.Val (Num n1), Env.Val (Num n2) ->
             (match bin with
              | Plus -> Env.Val (Num (n1 + n2))
              | Minus -> Env.Val (Num (n1 - n2))
              | Times -> Env.Val (Num (n1 * n2))
              | Equals -> Env.Val (Bool (n1 = n2))
              | LessThan -> Env.Val (Bool (n1 < n2))
              | _ -> raise (EvalError "Cannot do this op on an int"))
         | Env.Val (Float f1), Env.Val (Float f2) ->
             (match bin with
              | Plus -> Env.Val (Float (f1 +. f2))
              | Minus -> Env.Val (Float (f1 -. f2))
              | Times -> Env.Val (Float (f1 *. f2))
              | Equals -> Env.Val (Bool (f1 = f2))
              | LessThan -> Env.Val (Bool (f1 < f2))
              | _ -> raise (EvalError "Cannot do this op on a float"))
         | Env.Val (String s1), Env.Val (String s2) ->
             (match bin with
              | Concat -> Env.Val (String (s1 ^ s2))
              | Equals -> Env.Val (Bool (s1 = s2))
              | _ -> raise (EvalError "Cannot do this operation on a string"))
         | _ -> raise (EvalError "Cannot do this op on these types") in

       if sub then binop_eval (eval_s' e1) (eval_s' e2)
       else binop_eval (eval_d' e1 env) (eval_d' e2 env))
  | Conditional (e1, e2, e3) ->
      (* decide whether e1 evaluates to true or false and then evaluates the
         corresponding expression e2 or e3. not sure why, but when i try to
         abstract this section in any way, i get a stack overflow *)
      if sub then
        if eval_s' e1 = Env.Val (Bool true) then eval_s' e2
        else if eval_s' e1 = Env.Val (Bool false) then eval_s' e3
        else raise (EvalError "Conditional does not use a bool")
      else
        if eval_d' e1 env = Env.Val (Bool true) then eval_d' e2 env
        else if eval_d' e1 env = Env.Val (Bool false) then eval_d' e3 env
        else raise (EvalError "Conditional does not use a bool")
  | Let (v, e1, e2) ->
      (* if substituion model, substitute v in for free vars in e2.
         if dynamic model, extend to the environemnt to include v being
         equal to e1 and evaluate e2 in the new environment *)
      if sub then eval_s' (subst v (Env.extract_exp (eval_s' e1)) e2)
      else
        let e1_eval = Env.extract_exp (eval_d' e1 env) in
        let new_env = Env.extend env v (ref (Env.close e1_eval env)) in
        eval_d' e2 new_env
  | Letrec (v, e1, e2) ->
      (* if substitution model, substitue v into e1, then into e2 to evaluate.
         this does not work too well; the dynamic case works better by
         updating the enviornment to have the new value of v on every run *)
      if sub then eval_s' (subst v (subst v (Letrec (v, e1, Var v)) e1) e2)
      else
        let value = ref (Env.Val Unassigned) in
        let new_env = Env.extend env v value in
        value := Env.close (Env.extract_exp (eval_d' e1 new_env)) env ;
        eval_d' e2 new_env
  | Raise -> raise EvalException
  | Unassigned -> if sub then Env.Val exp
                  else raise (EvalError "Unassigned variable")
  | App (e1, e2) ->

      (* make sure e1 evaluates to a function. if susbtitution model then
         simply substitute v into the functions body. if dynamic, extend the
         environment to evaluate the function in the env with v updated *)
      let app_eval (e : Env.value) =
        match e with
        | Env.Val Fun (v, e) ->
            if sub then eval_s' (subst v (Env.extract_exp (eval_s' e2)) e)
            else
              let value = eval_d' e2 env in
              let new_env = Env.extend env v
                (ref (Env.close (Env.extract_exp value) env)) in
              eval_d' e new_env
        | _ -> raise (EvalError "Application must be to a function") in

      if sub then app_eval (eval_s' e1)
      else app_eval (eval_d' e1 env)
  | Try (e1, e2) ->
      if sub then try eval_s' e1 with | _ -> eval_s' e2
      else try eval_d' e1 env with | _ -> eval_d' e2 env ;;

(* The SUBSTITUTION MODEL evaluator *)

let eval_s (exp : expr) (env : Env.env) : Env.value =
  eval exp env Sub ;;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator *)

let eval_d (exp : expr) (env : Env.env) : Env.value =
  eval exp env Dyn ;;

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)

let eval_l (_exp : expr) (_env : Env.env) : Env.value =
  failwith "eval_l not implemented" ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;

(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, evaluate is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)

let evaluate = eval_d ;;
